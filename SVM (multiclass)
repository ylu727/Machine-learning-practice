from sklearn import datasets      
from sklearn.model_selection import train_test_split  
from sklearn.metrics import accuracy_score,precision_score,recall_score
from sklearn import svm
import matplotlib.pyplot as plt
import numpy as np


# 1. Load Iris dataset
data1 = datasets.load_iris()
print("Features: ", data1.feature_names)
X = data1.data[:, 1:3] # use the second (sepal width) and the third future (petal length), datapoints will be 2 dims)
y = data1.target

# 2. split dataset into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y,train_size = 0.7, random_state= 0 )

# 3. Train the SVM model, this case I use 4 different kernels to train.
lr = svm.SVC(C= 1, kernel = 'linear', decision_function_shape='ovo') # OVO is One vs One decision for multiclasses case.
lr.fit(X_train, y_train)

rbf = svm.SVC(C = 1, kernel = 'rbf', decision_function_shape = 'ovo')
rbf.fit(X_train, y_train)

plm = svm.SVC(C = 1, kernel = 'poly', degree = 3, decision_function_shape = 'ovo') # degree is used for poly function
plm.fit(X_train, y_train)

# 4. use a mesh to plot the training result
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = 0.001 #stepsize of the mesh
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),np.arange(y_min, y_max, h))

titles = ['Linear','RBF','Polynomial']

l1 = [lr, rbf, plm]

for i, model, in enumerate(l1): # use a loop to draw the 4 figures 
    plt.figure(figsize=(10, 4))
    pred = model.predict(np.c_[xx.ravel(), yy.ravel()])
    pred = pred.reshape(xx.shape)
    plt.contourf(xx, yy, pred, cmap=plt.cm.GnBu, alpha = 0.5)
    plt.scatter(X[:, 0], X[:, 1], c = y, cmap=plt.cm.seismic, edgecolors= 'k')
    plt.xlabel('Sepal width (cm)')
    plt.ylabel('petal length (cm)')
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title(titles[i])
    plt.show()

# 5. Evaluations of four kernels
# linear
y_pred = lr.predict(X_test)
print('Evaluation of linear kernel')
print("Accuracy:",accuracy_score(y_test, y_pred))       

# rbf
y_pred = rbf.predict(X_test)
print('Evaluation of rbf kernel')
print("Accuracy:",accuracy_score(y_test, y_pred))       


# poly
y_pred = plm.predict(X_test)
print('Evaluation of Poly kernel')
print("Accuracy:",accuracy_score(y_test, y_pred))  
